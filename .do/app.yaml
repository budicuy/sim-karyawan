# Konfigurasi untuk DigitalOcean App Platform
# Dokumentasi: https://docs.digitalocean.com/products/app-platform/reference/app-spec/

name: laravel-penumpang-app
region: sgp1 # Ganti dengan region pilihan Anda, contoh: nyc3, fra1

# Definisi Database Terkelola (PostgreSQL)
databases:
  - name: db-karyawan
    engine: PG # PG untuk PostgreSQL
    version: "15"
    # Jumlah node (1 untuk development/staging, 2+ untuk high availability)
    num_nodes: 1
    # Ukuran instance database, ganti sesuai kebutuhan
    size: db-s-1vcpu-1gb

services:
  - name: web
    # Tentukan repositori GitHub Anda. App Platform akan otomatis deploy saat ada push.
    github:
      repo: "budiannor/karyawan2" # Ganti dengan <username-github>/<nama-repo> Anda
      branch: "main"
      deploy_on_push: true

    # Hubungkan layanan web ini dengan database yang didefinisikan di atas
    database: db-karyawan

    # Perintah yang dijalankan untuk membangun aplikasi Anda.
    build_command: |
      # 1. Install dependensi PHP
      composer install --optimize-autoloader --no-dev

      # 2. Setup pnpm (karena proyek menggunakan pnpm-lock.yaml)
      npm install -g pnpm

      # 3. Install dependensi Node.js
      pnpm install

      # 4. KUNCI UTAMA: Install headless Chrome yang dibutuhkan oleh Browsershot/Puppeteer
      echo "Installing headless Chrome for Puppeteer..."
      pnpm exec puppeteer browsers install chrome-headless-shell

      # 5. Build aset frontend
      pnpm run build

      # 6. Optimasi Laravel untuk produksi
      php artisan optimize

    # Perintah untuk menjalankan aplikasi setelah build selesai.
    run_command: |
      # Menjalankan server Octane dengan FrankenPHP
      php artisan octane:start --server=frankenphp --host=0.0.0.0 --port=8080

    # Port HTTP yang diekspos oleh aplikasi Anda.
    http_port: 8080

    # Konfigurasi instance
    instance_count: 1
    instance_size_slug: basic-xxs # Ganti sesuai kebutuhan

    # Variabel Lingkungan (Environment Variables)
    envs:
      - key: APP_NAME
        value: "Laravel"
      - key: APP_ENV
        value: "production"
      - key: APP_DEBUG
        # Di produksi, APP_DEBUG sebaiknya 'false' meskipun di .env 'true'
        value: "false"
      - key: APP_URL
        value: "${APP_URL}"
      - key: APP_KEY
        value: "base64:2wedmS/bvizTAgo5WP/fHKWHC+Uy/lQZdpEvbKCoLZ8="
        type: SECRET
      - key: APP_LOCALE
        value: "id"
      - key: APP_FALLBACK_LOCALE
        value: "id"
      - key: APP_FAKER_LOCALE
        value: "id_ID"
      - key: LOG_CHANNEL
        value: "stderr" # Menggunakan stderr lebih umum untuk logging di kontainer
      - key: LOG_LEVEL
        value: "debug"

      # Konfigurasi Database (menggunakan database terkelola)
      - key: DB_CONNECTION
        value: "pgsql"
      # DB_HOST, PORT, DATABASE, USERNAME, PASSWORD akan di-inject secara otomatis
      # oleh DigitalOcean karena ada 'database: db-karyawan' di atas.

      # Konfigurasi Session, Cache, dan Queue
      - key: SESSION_DRIVER
        value: "database"
      - key: CACHE_STORE
        value: "database"
      - key: QUEUE_CONNECTION
        value: "database"

      # Konfigurasi Mail
      - key: MAIL_MAILER
        value: "log"

      # Konfigurasi Puppeteer
      - key: PUPPETEER_CACHE_DIR
        value: "/workspace/.cache/puppeteer"

      # Konfigurasi Vite
      - key: VITE_APP_NAME
        value: "${APP_NAME}"

    # Hooks: Perintah yang dijalankan pada siklus hidup aplikasi
    hooks:
      # Jalankan migrasi database setelah build berhasil dan sebelum aplikasi live.
      post_deploy:
        command: "php artisan migrate --force"
